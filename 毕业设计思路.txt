新闻资讯:整车资讯，赛事活动，骑行游记，热点快报
骑游动态:热门动态，我的关注
论坛社区:二手交易，约伴骑行，装备修理，中老年车友，山地车，公路车，旅行车，聊天灌水，骑行安全
个人中心:个人资料，我的帖子，我的投稿，我的动态，反馈，收藏，登录注册



数据库密码：
admin：root ， root
HeiBlog：lzkenn ， 123456
logo： 标志客
icon： iconfont

第一天个人中心授权上登录：
首先使用button标签中的属性值open-type="getUserInfo"（小程序中规定只有button可以使用），设置bindgetuserinfo="bindGetUserInfo"监听授权访问，在js中写入bindGetUserInfo函数，通过e.detail.userInfo可获得登录信息将他存入全局属性中userInfo中

在云端新建云函数login，通过const wxInfo = cloud.getWXContext() return {
    wxInfo,
  }获取openid值（openid为用户唯一的识别标识）

在app小程序端在bindGetUserInfo函数中通过wx.cloud.callFunction获取云端返回的值将openid值存入全局属性userInfo.openid中，通过this.setData将值渲染到小程序端

第二天：
新闻资讯静态页面

第三天：
新闻资讯数据库设计
添加数据：

文章标题：string
作者：string，
日期：date，
内容：array，
图片;array
类别：string
点击量：number

1.为icon添加事件：点击时获取点击的index值，通过index的值获取icon的分类名称，然后通过wx.navigateTo跳转到分类的列表页面通过url值传递icon的分类名称，在分类列表页面通过options.category获取url中的值，使用云函数根据分类名称查询云数据库中的列表信息，在通过setdata将数据渲染到视图层

第四天：

1.格式化日期：
编写util.js文件处理日期格式并暴露出去，在需要格式化日期的js文件中使用require("文件相对地址")调用，将后台的数据查询出来将日期格式化，将格式化时期赋值给查询出的日期用this.setdata将数据渲染到视图层

2.最新资讯根据日期降序查询数据并渲染到视图层

3.*******轮播图根据点击量查询出来渲染到视图层（修改：每次点击后点击数量改变会造成轮播图更新过快）

4.为最新资讯列表的每一项绑定点击事件，并通过data-id="{{ 文章id值 }}"存储id值，在绑定函数中可通过e.currentTarget.dataset.id获取到存储的id值，使用wx.navigateTo通过url问号传参的方式跳转到对应的详情页面，具体方法是在详情页面的js生命周期函数为监听页面加载中通过options的值获取到url中传递过来的id值，通过文章的id值查询到对应的详情页面

第五天：

1.点击量

编写云函数更新，根据url传来ID值更新对应的文章点击数，使count的值自增1，具体为操作位为先创建云函数，在js中写入云函数入口，并初始化云函数指定当前的云函数环境，然后编写更新的异步函数 ，设置参数event，event中包含小程序端传进来的参数，解构出id值，根据id值更新count，使用db.collection('数据库名称').doc(id).update（{data：{count：db.command.inc(1)}}）实现自增1并更新，在小程序端调用 wx.cloud.callFunction（{name：‘云函数名称’，data：{id：‘要更新的文章id值’}}）函数实现。注意小程序端由于用户访问数据库的权限会造成无法进行更新操作，所以在云函数中写入，云函数写完要配置config.json文件,并部署上传。

2.图片懒加载功能

在需要懒加载的image中直接加lazy-load:true标签就能完成此项功能

3.下拉刷新

在app.json或者需要下拉刷新的page中配置json文件，app.json中将 "enablePullDownRefresh": true添加到window下，page中加入到对应的json文件中，然后在需要使用到的page中加入下拉监听函数 onPullDownRefresh: function (){}，在函数中调用下拉刷新要重新加载的数据。为了方便调用把之前小程序端写入的增删改查操作放入函数中，

4.上拉加载更多

在实现上拉加载更多时首先先将函数查询进行分页处理，定义每一页列表中要显示的个数pages和当前页数page，查询时添加条件skip（this.page *pages).limt(pages)从第几条数据开始查询，查询几条，之后添加页面上拉触底事件的处理函数onReachBottom: function（），在函数中将this.page+1,并调用数据分页查询的函数，注意此时应该将数据加到之前的数据之后所以要先判断此时是数据初始化还是加载更多数据，可以在查询函数中设置形参isInit，将页面是初始化和下拉刷新的函数中放入实参值true，在查询数据函数中判断isInit的布尔值，如果是加载更多就将查询到的值最加到当前数据在setdata到渲染层，代码为this.setdata({"接受数据库回调数据的名称"：this.data.接受数据库回调数据的名称.concat(数据库返回的值)})，完成后发现下拉后在刷新初始化的数据不完整，是由于下拉后pages的值不为0导致，所以在查询前先判断isInit，然后将0赋值给this.page 

第七天
0.个人中心添加发布文章功能
在个人中心添加发布投稿的导航标签，并对导航标签进行判断条件判断，当且仅当openid为开发者时时才会显示，否则隐藏标签，在personal中创建publishNews文件夹，此文件夹用了实现发布文章功能，在publishNews文件夹中的wxml文件进行发布文件的静态页面编写。
封面需要特别写出，待更新。。。。。。

1.富文本编辑器
在发布文章功能时我添加了富文编辑器，目的是为能让发布的文章在小程序端显示更美观，具有图文混排的效果。此时我选择使用WxParse插件，使用起来也比较的简单，只需要在gitHub中下载该插件的安装包，将安装包解压放在项目并在需要使用的页面调用文件即可。
首先在发布文章功能页面编写编辑的样式，在编辑的功能按钮上由于使用了大量的iconfont所以需要插入了文件，这里我使用的时本地插入，在publishNews文件夹下新建了assert文件夹将需要使用的iconfont图标以编码的方式放入了iconfont.wxss文件中，并在publishNews中的wxss文件中用import引入，编辑器的功能只需要**某几项**调用接口即可，其中插入图片的功能稍微复杂些在插入图片的绑定事件中调用api：wx.chooseImage这是用来从本地相册选择图片或使用相机拍照的函数，在插入成功的回调函数中通过tempFilePath获取到图片的本地临时存放地址，而要想在editor中显示图片EditorContext.insertImage函数，需要传入参数src图片地址，而图片地址，仅支持 http(s)、base64、云图片(2.8.0)、临时文件(2.8.3)。这里需要注意不能使用本地临时地址，因为本地临时地址虽然能在编辑器中但在发布成功后详情页面中图片地址应该为服务器中存放的图片地址，由于我后端使用的时云开发，所以用云图片地址，要想得到云图片地址首先就应该先将图片上传到云文件中，上传图片只需要调用云函数 wx.cloud.uploadFile进行上传，需要传入2个参数本地临时地址和云文件存放地址，本地临时地址tempFilePath就可获得，而云文件存放地址需经过特殊处理让文件名不会重复，我这里使用时间戳的方式，，在上传成功时使EditorContext.insertImage函数将云文件地址传入，这里一定要注意执行顺序，上传文件到云文件中wx.cloud.uploadFile应该在wx.chooseImage的成功回调函数中进行，否则他会在成功回调函数还未进行时先进行上传函数，这时本地地址还未定义并赋值，会造成报错。

2.表单验证
表单验证这里我依旧选择了使用插件WxValidate只需将此文件放入程序中便可以使用，而我将此文件放在了util文件夹中，在publishNews.js文件中引用，在js中编写initValidate方法方便之后调用，在方法中添加验证规则rule，以及提示信息message，其中required代表必填项，表单项中所有的都为必填项，但不能满足所有的表单信息，其中勾选文章分类以及文本编辑器中需要自定义验证规则，可以通过new WxValidate（）创建自定义对象，自定以构造对象有个addMethod方法用于添加自定义规则，该方法需要传递的参数有需要验证规则的名称，验证规则的函数，以及失败时提醒的信息

3.提交表单信息到data中
在publishNews.js中添加formSubmit事件用于表单提交，formSubmit中会返回一个参数，这里我用e来接收，通过e.detail.value可获得表单数据，调用表单验证方法this.WxValidate.checkForm（）将表单数据传入如果这值为false则代表验证不通过，需要弹出提示框，需要先在方法外编写提示框的方法showModal（erreo），该方法可通过微信提供的wx.showModal（{}）来实现，可以传入title和content，这里content的值我用形参erreo，而验证不通过会返回erreo，此时直接调用showModal将实参erreo传入即可，由于这方法在formSubmit外所以使用this.showModal，之后直接return false中端函数向下执行，然后判断封面是否上传没有则提示错误并return false，在判断editor编辑器的内容，这里判断内容是否大于3个字符，没有则提示请输入大于3个字符的文章内容，并中端函数向下执行，如果成功就将res.html的值通过this.setData传入data数据中,最后再将封面上传到云文件中，成功后通过this.setData分别传入表单中的信息值
注意表单提交按钮要添加formType属性该属性用于 form 组件，点击分别会触发 form 组件的 submit/reset 事件

4.将表单数据提交到数据库
首先在云函数的入口中进行解构需要传入的形参值，之后对数据库进行添加操作，之后在publishNews.js中进行调用，具体为编写添加方法addNews（），在方法中通过wx.cloud.callFunction（{}）调用云函数中的方法进行添加，需要传入云函数的名称和需要添加的值，此时需要添加的值都放在data数据中，将data数据的值对应传入即可，最后更新成功还要将data的数据设置为空，并在onLoad函数中调用addNews（）方法即完成了操作

第八天
1.论坛首页静态页面

第九天
1.重做登录页面：
之前的登录页面存在着很大的问题，首先是对登录的判断上，登录以后我是获取了openid值在将他渲染到小程序的data数据上通过判断openid的值是否存在来判断登录状态的，这样的操作是有问题，只要刷新了页面openid的值将会消失，所以每刷新一次就要重新登录获取用户信息。
经过修改后，我改变了登录的顺序，之前要手动点击到个人中心在点登录，现在进入程序便会进行授权登录，只有授权的用户才能浏览小程序，验证方式我也进行了改变，由于之前对小程序的登录授权不理解，所以才会用openid来判断，但其实只要经过授权的用户小程序都会获得coad，在经过服务器端调用auth.code2Session 接口处理发送给微信接口服务然后服务器端换取用户唯一标识 OpenID 和 会话密钥 session_key。之后开发者服务器可以根据用户标识来生成自定义登录态，返回自定义登录态小程序就会缓存自定义登录态，通过调用 wx.getSetting就能通过 authSetting属性获得用户授权结果，如果已经授权会返回"scope.userInfo": true，所以只要调用wx.getSetting判断authSetting["scope.userInfo"]是否为真就能判断用户是否已经授权，已经授权的用户除非清除了授权缓存信息，不然就可以一直存在，具体操作如下：
首先先编写登录页面，并绑定点击授权按钮事件bindGetUserInfo，将登录页面放在app.json中pages配置信息的第一个，使他进入便执行授权判断，如果已授权就将openid设置为全局变量方便以后调用，并将登录页面隐藏，只需在登录的wxml页面中用一个block包裹，并进行判断isHide如果为false为隐藏，而如果为未授权，就将isHide的值设置为true，让页面显示，由于我用的云开发所以获取openid比较简单，只需要调用云函数cloud.getWXContext便可获得。
之后在为bindGetUserInfo添加点击事件，事件返回值用e来接受如果存在e.detail.userInfo则授权时用户按了确定授权，确定授权时将用户信息插入数据库的Users表中，之前我并没有设置Users表，但发现还是需要确定用户是否为管理员的身份还是普通用户所以我还是决定建立Users表记录用户，为了防止用户之前已经授权但授权缓存可能被删除的情况而重复插入了用户信息的情况在，所以插入数据之前还需要先查询用户是否之前已经存在在数据库中，如果有数据则将查询到的数据长度length的值赋值给小程序，判断length是否小于1，如果小于则执行数据的插入操作，否则就直接跳转到新闻资讯的首页


